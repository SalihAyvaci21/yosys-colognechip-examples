
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.51 (git sha1 c4b519022, x86_64-w64-mingw32-g++ 13.2.0 -O3)

-- Running command `read -sv src\ButtonLedToggle.v src\debounce_ip_core.v ; synth_gatemate -top ButtonLedToggle -nomx8 -vlog net\ButtonLedToggle_synth.v' --

1. Executing Verilog-2005 frontend: src\ButtonLedToggle.v
Parsing SystemVerilog input from `src\ButtonLedToggle.v' to AST representation.
Storing AST representation for module `$abstract\ButtonLedToggle'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: src\debounce_ip_core.v
Parsing SystemVerilog input from `src\debounce_ip_core.v' to AST representation.
Storing AST representation for module `$abstract\debounce_ip_core'.
Successfully finished Verilog frontend.

3. Executing SYNTH_GATEMATE pass.

3.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/cells_sim.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\CC_IBUF'.
Generating RTLIL representation for module `\CC_OBUF'.
Generating RTLIL representation for module `\CC_TOBUF'.
Generating RTLIL representation for module `\CC_IOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IBUF'.
Generating RTLIL representation for module `\CC_LVDS_OBUF'.
Generating RTLIL representation for module `\CC_LVDS_TOBUF'.
Generating RTLIL representation for module `\CC_LVDS_IOBUF'.
Generating RTLIL representation for module `\CC_IDDR'.
Generating RTLIL representation for module `\CC_ODDR'.
Generating RTLIL representation for module `\CC_DFF'.
Generating RTLIL representation for module `\CC_DLT'.
Generating RTLIL representation for module `\CC_LUT1'.
Generating RTLIL representation for module `\CC_LUT2'.
Generating RTLIL representation for module `\CC_LUT3'.
Generating RTLIL representation for module `\CC_LUT4'.
Generating RTLIL representation for module `\CC_MX2'.
Generating RTLIL representation for module `\CC_MX4'.
Generating RTLIL representation for module `\CC_MX8'.
Generating RTLIL representation for module `\CC_ADDF'.
Generating RTLIL representation for module `\CC_MULT'.
Generating RTLIL representation for module `\CC_BUFG'.
Generating RTLIL representation for module `\CC_BRAM_20K'.
Generating RTLIL representation for module `\CC_BRAM_40K'.
Generating RTLIL representation for module `\CC_FIFO_40K'.
Generating RTLIL representation for module `\CC_L2T4'.
Generating RTLIL representation for module `\CC_L2T5'.
Successfully finished Verilog frontend.

3.2. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/cells_bb.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\CC_PLL'.
Generating RTLIL representation for module `\CC_PLL_ADV'.
Generating RTLIL representation for module `\CC_SERDES'.
Generating RTLIL representation for module `\CC_CFG_CTRL'.
Generating RTLIL representation for module `\CC_USR_RSTN'.
Successfully finished Verilog frontend.

3.3. Executing HIERARCHY pass (managing design hierarchy).

3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\ButtonLedToggle'.
Generating RTLIL representation for module `\ButtonLedToggle'.

3.4.1. Analyzing design hierarchy..
Top module:  \ButtonLedToggle
Parameter \CLK_FREQ_HZ = 10000000
Parameter \SHIFT_LEN = 3
Parameter \IS_PULLUP = 0

3.4.2. Executing AST frontend in derive mode using pre-parsed AST for module `\debounce_ip_core'.
Parameter \CLK_FREQ_HZ = 10000000
Parameter \SHIFT_LEN = 3
Parameter \IS_PULLUP = 0
Generating RTLIL representation for module `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core'.

3.4.3. Analyzing design hierarchy..
Top module:  \ButtonLedToggle
Used module:     $paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core

3.4.4. Analyzing design hierarchy..
Top module:  \ButtonLedToggle
Used module:     $paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core
Removing unused module `$abstract\debounce_ip_core'.
Removing unused module `$abstract\ButtonLedToggle'.
Removed 2 unused modules.

3.5. Executing PROC pass (convert processes to netlists).

3.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$src\debounce_ip_core.v:28$20 in module $paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.
Marked 1 switch rules as full_case in process $proc$src\ButtonLedToggle.v:34$14 in module ButtonLedToggle.
Removed a total of 0 dead cases.

3.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 0 assignments to connections.

3.5.4. Executing PROC_INIT pass (extract init attributes).

3.5.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
Found async reset \rst_n in `\ButtonLedToggle.$proc$src\ButtonLedToggle.v:34$14'.

3.5.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

3.5.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
     1/6: $0\out_valid[0:0]
     2/6: $0\shift_reg[2:0]
     3/6: $0\sync_1[0:0]
     4/6: $0\sync_0[0:0]
     5/6: $0\counter[17:0]
     6/6: $0\debounced_button[0:0]
Creating decoders for process `\ButtonLedToggle.$proc$src\ButtonLedToggle.v:34$14'.
     1/1: $0\led_out[0:0]

3.5.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.5.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\debounced_button' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$56' with positive edge clock and positive level reset.
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\out_valid' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$61' with positive edge clock and positive level reset.
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\shift_reg' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$66' with positive edge clock and positive level reset.
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\counter' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$71' with positive edge clock and positive level reset.
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\sync_0' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$76' with positive edge clock and positive level reset.
Creating register for signal `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.\sync_1' using process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
  created $adff cell `$procdff$81' with positive edge clock and positive level reset.
Creating register for signal `\ButtonLedToggle.\led_out' using process `\ButtonLedToggle.$proc$src\ButtonLedToggle.v:34$14'.
  created $adff cell `$procdff$86' with positive edge clock and positive level reset.

3.5.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.5.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
Removing empty process `$paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.$proc$src\debounce_ip_core.v:28$20'.
Found and cleaned up 1 empty switch in `\ButtonLedToggle.$proc$src\ButtonLedToggle.v:34$14'.
Removing empty process `ButtonLedToggle.$proc$src\ButtonLedToggle.v:34$14'.
Cleaned up 4 empty switches.

3.5.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.
<suppressed ~16 debug messages>
Optimizing module ButtonLedToggle.
<suppressed ~2 debug messages>

3.6. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$59d35deb818481000d0747c8484d85bcdc43367f\debounce_ip_core.
<suppressed ~1 debug messages>

3.7. Executing TRIBUF pass.

3.8. Executing DEMINOUT pass (demote inout ports to input or output).

3.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 10 unused cells and 34 unused wires.
<suppressed ~11 debug messages>

3.11. Executing CHECK pass (checking for obvious problems).
Checking module ButtonLedToggle...
Found and reported 0 problems.

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.12.6. Executing OPT_DFF pass (perform DFF optimizations).

3.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.12.9. Finished OPT passes. (There is nothing left to do.)

3.13. Executing FSM pass (extract and optimize FSM).

3.13.1. Executing FSM_DETECT pass (finding FSMs in design).

3.13.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.13.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.13.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.13.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.13.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.13.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$86 ($adff) from module ButtonLedToggle (D = $not$src\ButtonLedToggle.v:40$17_Y, Q = \led_out).
Adding EN signal on $flatten\debounce_inst.$procdff$71 ($adff) from module ButtonLedToggle (D = $flatten\debounce_inst.$0\counter[17:0], Q = \debounce_inst.counter).
Adding EN signal on $flatten\debounce_inst.$procdff$56 ($adff) from module ButtonLedToggle (D = \debounce_inst.shift_reg [0], Q = \debounce_inst.debounced_button).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.
<suppressed ~1 debug messages>

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ButtonLedToggle.$flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24 ($add).
Removed top 14 bits (of 32) from port Y of cell ButtonLedToggle.$flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24 ($add).
Removed top 19 bits (of 32) from port B of cell ButtonLedToggle.$flatten\debounce_inst.$lt$src\debounce_ip_core.v:47$23 ($lt).
Removed top 14 bits (of 32) from wire ButtonLedToggle.$flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24_Y.

3.16. Executing PEEPOPT pass (run peephole optimizers).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~5 debug messages>

3.19. Executing SHARE pass (SAT-based resource sharing).

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/cmp2lut.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

3.21. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.23. Executing TECHMAP pass (map to technology primitives).

3.23.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/mul_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/mul_map.v' to AST representation.
Generating RTLIL representation for module `\$__MULMXN'.
Successfully finished Verilog frontend.

3.23.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.24. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ButtonLedToggle:
  creating $macc model for $flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24 ($add).
  creating $alu model for $macc $flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24.
  creating $alu model for $flatten\debounce_inst.$lt$src\debounce_ip_core.v:47$23 ($lt): new $alu
  creating $alu cell for $flatten\debounce_inst.$lt$src\debounce_ip_core.v:47$23: $auto$alumacc.cc:495:replace_alu$102
  creating $alu cell for $flatten\debounce_inst.$add$src\debounce_ip_core.v:48$24: $auto$alumacc.cc:495:replace_alu$107
  created 2 $alu and 0 $macc cells.

3.25. Executing OPT pass (performing simple optimizations).

3.25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.
<suppressed ~3 debug messages>

3.25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.25.6. Executing OPT_DFF pass (perform DFF optimizations).

3.25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.25.9. Rerunning OPT passes. (Maybe there is more to do..)

3.25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.25.13. Executing OPT_DFF pass (perform DFF optimizations).

3.25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.25.16. Finished OPT passes. (There is nothing left to do.)

3.26. Executing MEMORY pass.

3.26.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.26.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.26.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.26.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.26.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.26.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.26.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.26.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.26.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.26.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.28. Executing MEMORY_LIBMAP pass (mapping memories to cells).

3.29. Executing TECHMAP pass (map to technology primitives).

3.29.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/brams_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__CC_BRAM_TDP_'.
Generating RTLIL representation for module `\$__CC_BRAM_SDP_'.
Successfully finished Verilog frontend.

3.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.30. Executing OPT pass (performing simple optimizations).

3.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.
<suppressed ~11 debug messages>

3.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.30.3. Executing OPT_DFF pass (perform DFF optimizations).

3.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 3 unused cells and 7 unused wires.
<suppressed ~4 debug messages>

3.30.5. Finished fast OPT passes.

3.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.32. Executing OPT pass (performing simple optimizations).

3.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.32.6. Executing OPT_DFF pass (perform DFF optimizations).

3.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.32.9. Finished OPT passes. (There is nothing left to do.)

3.33. Executing TECHMAP pass (map to technology primitives).

3.33.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/techmap.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.33.2. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/arith_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_gatemate_alu'.
Successfully finished Verilog frontend.

3.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$616df8e03ec7d8fbe6b32572e125090c9dfe0318\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$ea402187f386206c0840504755479bf827f47707\_80_gatemate_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~143 debug messages>

3.34. Executing OPT pass (performing simple optimizations).

3.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.
<suppressed ~82 debug messages>

3.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

3.34.3. Executing OPT_DFF pass (perform DFF optimizations).

3.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 18 unused cells and 48 unused wires.
<suppressed ~19 debug messages>

3.34.5. Finished fast OPT passes.

3.35. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port ButtonLedToggle.clk using CC_IBUF.
Mapping port ButtonLedToggle.led_out using CC_OBUF.
Mapping port ButtonLedToggle.push_button using CC_IBUF.
Mapping port ButtonLedToggle.rst_n using CC_IBUF.
Removed 0 unused cells and 3 unused wires.

3.36. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

3.38. Executing TECHMAP pass (map to technology primitives).

3.38.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/reg_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/reg_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFFE_xxxx_'.
Generating RTLIL representation for module `\$_DLATCH_xxx_'.
Successfully finished Verilog frontend.

3.38.2. Continuing TECHMAP pass.
Using template $paramod$e7538ffa59a8772e35f6a6ac594ef170009aa61b\$_DFFE_xxxx_ for cells of type $_DFFE_PN0P_.
Using template $paramod$6c9ba52ee67087cff7348db45cdee6cff092aaba\$_DFFE_xxxx_ for cells of type $_DFFE_PN1P_.
No more expansions possible.
<suppressed ~78 debug messages>

3.39. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.40. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 0 unused cells and 156 unused wires.
<suppressed ~1 debug messages>

3.42. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module ButtonLedToggle..
  Treeifying 20 MUXes:
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [0].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [1].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [2].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [3].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [4].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [5].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [6].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [7].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [8].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [9].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [10].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [11].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [12].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [13].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [14].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [15].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [16].
    Found tree with 1 MUXes at root $flatten\debounce_inst.$0\counter[17:0] [17].
    Found tree with 2 MUXes at root $flatten\debounce_inst.$0\out_valid[0:0].
    Finished treeification: Found 19 trees.
  Covering trees:
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\counter[17:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $flatten\debounce_inst.$0\out_valid[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~340 debug messages>

3.43. Executing OPT pass (performing simple optimizations).

3.43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.
<suppressed ~1 debug messages>

3.43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.43.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ButtonLedToggle..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.43.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ButtonLedToggle.
Performed a total of 0 changes.

3.43.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ButtonLedToggle'.
Removed a total of 0 cells.

3.43.6. Executing OPT_SHARE pass.

3.43.7. Executing OPT_DFF pass (perform DFF optimizations).

3.43.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..

3.43.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ButtonLedToggle.

3.43.10. Finished OPT passes. (There is nothing left to do.)

3.44. Executing SIMPLEMAP pass (map simple cells to gate primitives).

3.45. Executing TECHMAP pass (map to technology primitives).

3.45.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/mux_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/mux_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

3.45.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

3.46. Executing ABC pass (technology mapping using ABC).

3.46.1. Extracting gate netlist of module `\ButtonLedToggle' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 57 wires to a netlist network with 25 inputs and 23 outputs.

3.46.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      23.
ABC: Participating nodes from both networks       =      47.
ABC: Participating nodes from the first network   =      23. (  95.83 % of nodes)
ABC: Participating nodes from the second network  =      24. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =      23. (  95.83 % of names can be moved)
ABC: Node pairs (same polarity)                   =      23. (  95.83 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

3.46.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       23
ABC RESULTS:        internal signals:        9
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       23
Removing temp directory.
Removed 0 unused cells and 38 unused wires.

3.47. Executing TECHMAP pass (map to technology primitives).

3.47.1. Executing Verilog-2005 frontend: C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/lut_map.v
Parsing Verilog input from `C:\GATEMA~1\CC-TOO~1\bin\yosys\share/gatemate/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

3.47.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
No more expansions possible.
<suppressed ~91 debug messages>
Removed 0 unused cells and 46 unused wires.

3.48. Executing CLKBUFMAP pass (inserting clock buffers).
Inserting CC_BUFG on ButtonLedToggle.debounce_inst.clk[0].

3.49. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `ButtonLedToggle'. Setting top module to ButtonLedToggle.

3.49.1. Analyzing design hierarchy..
Top module:  \ButtonLedToggle

3.49.2. Analyzing design hierarchy..
Top module:  \ButtonLedToggle
Removed 0 unused modules.

3.50. Printing statistics.

=== ButtonLedToggle ===

   Number of wires:                 46
   Number of wire bits:            160
   Number of public wires:          15
   Number of public wire bits:      34
   Number of ports:                  4
   Number of port bits:              4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88
     $scopeinfo                      1
     CC_ADDF                        33
     CC_BUFG                         1
     CC_DFF                         26
     CC_IBUF                         3
     CC_LUT1                         1
     CC_LUT2                         1
     CC_LUT3                        21
     CC_OBUF                         1

3.51. Executing CHECK pass (checking for obvious problems).
Checking module ButtonLedToggle...
Found and reported 0 problems.

3.52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ButtonLedToggle..
Removed 1 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.53. Executing Verilog backend.

3.53.1. Executing BMUXMAP pass.

3.53.2. Executing DEMUXMAP pass.
Dumping module `\ButtonLedToggle'.

End of script. Logfile hash: 37803e49e9
Yosys 0.51 (git sha1 c4b519022, x86_64-w64-mingw32-g++ 13.2.0 -O3)
Time spent: 1% 19x opt_clean (0 sec), 1% 18x opt_expr (0 sec), ...
